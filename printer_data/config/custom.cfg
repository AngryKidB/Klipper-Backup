[gcode_macro ADXL_HOTEND]
gcode:
  ACCELEROMETER_QUERY chip=hotend

[gcode_macro ADXL_BED]
gcode:
  ACCELEROMETER_QUERY chip=bed
  
[gcode_macro TEST_PROBE]
gcode:
  LAZY_HOME
  PROBE_ACCURACY

[gcode_macro LOAD]
gcode:
 LAZY_HOME
 PARK
 M106 S255
 {% set LOAD_TEMP = params.LOAD_TEMP|default(240)|float %}
 {% set LOAD_LENGTH = params.LOAD_LENGTH|default(50)|float %}
 M109 S{LOAD_TEMP}
 G91
 G1 E{LOAD_LENGTH} F200
 G1 E-4
 
[gcode_macro UNLOAD]
gcode:
 {% set TARGET_EXTRUDER_TEMP = params.TARGET_EXTRUDER_TEMP|default(240)|float %}
 _UNLOAD_FILAMENT LENGTH=100 MINIMUM={TARGET_EXTRUDER_TEMP}

[gcode_macro UNLOAD_FILAMENT]
gcode:
 UNLOAD
   
[gcode_macro RESONANCE_CAL_X]
description: test resonances in x direction / of the hotend
gcode:
 M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
 LAZY_HOME
 SHAPER_CALIBRATE AXIS=x
 RUN_SHELL_COMMAND CMD=adxl_x
 M118 Test done
 SAVE_CONFIG

[gcode_macro RESONANCE_CAL_Y]
description: test resonances in y direction / of the heated bed
gcode:
 M118 DO NOT TOUCH THE PRINTER UNTIL DONE!!!
 LAZY_HOME
 SHAPER_CALIBRATE AXIS=y
 RUN_SHELL_COMMAND CMD=adxl_y
 M118 Test done
 SAVE_CONFIG

[gcode_shell_command adxl_x]
command: sh /home/biqu/SCRIPTS/adxl_x.sh	
timeout: 600.
verbose: True

[gcode_shell_command adxl_y]
command: sh /home/biqu/SCRIPTS/adxl_y.sh	
timeout: 600.
verbose: True

[gcode_macro CUR_TIMEOUT]
gcode:
 SET_IDLE_TIMEOUT

[gcode_macro SET_TIMEOUT]
gcode:
 {% set svv = printer.save_variables.variables %}
 {% set TARGET_TIME = params.TARGET_TIME|default(0)|float %}
 {% if TARGET_TIME == 0 %}
 SET_IDLE_TIMEOUT timeout={svv.motor_timeout_time}
 {% else %}
 SAVE_VARIABLE VARIABLE=motor_timeout_time VALUE={TARGET_TIME}
 SET_IDLE_TIMEOUT timeout={TARGET_TIME}
 {% endif %}
 
[gcode_macro CUR_TUNE_TEMPS]
gcode:
 {% set svv = printer.save_variables.variables %}
 RESPOND TYPE=echo_no_space msg="HOTEND TUNE TEMP - {svv.temperature_target_hotend}"
 RESPOND TYPE=echo_no_space msg="BED TUNE TEMP - {svv.temperature_target_bed}"
  
[gcode_macro TUNE_BED_PID]
gcode:
 {% set svv = printer.save_variables.variables %}
 {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %} 
 SAVE_VARIABLE VARIABLE=temperature_target_bed VALUE={TARGET_TEMP}
 M118 {svv.temperature_target_bed}
 PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
 TURN_OFF_HEATERS
 SAVE_CONFIG

[gcode_macro TUNE_HOTEND_PID]
gcode:
 {% set svv = printer.save_variables.variables %}
 {% set TARGET_TEMP = params.TARGET_TEMP|default(200)|float %} 
 SAVE_VARIABLE VARIABLE=temperature_target_hotend VALUE={TARGET_TEMP}
 M118 {svv.temperature_target_hotend}
 PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
 TURN_OFF_HEATERS
 SAVE_CONFIG

[gcode_macro CENTER_HEAD]
gcode:
 LAZY_HOME
 G90
 G0 X117.5 Y117.5 Z25 F3000

[force_move]
# Enable commands that force potentially unsafe movement
enable_force_move: True

[gcode_macro FORCED_MOVES]
gcode:
 {% set svv = printer.save_variables.variables %}
 {% if svv.force_value != 1 %}
 {% set FORCE = 1 %}
 SAVE_VARIABLE VARIABLE=force_value VALUE={FORCE}
 G91
 SET_KINEMATIC_POSITION X=0 Y=0 Z=100
 {% else %}
 {% set FORCE = 0 %}
 SAVE_VARIABLE VARIABLE=force_value VALUE={FORCE}
 G90
 M84
 {% endif %}
 
[gcode_macro UNHOME_RAISE_Z]
gcode:
 G90
 SET_KINEMATIC_POSITION Z=0
 G0 Z10 F600
 M84
  
[gcode_macro COMGROW]    
gcode:
 {% if printer.toolhead.homed_axes != "xyz" %}
 UNHOME_RAISE_Z
 SET_SURFACE_ACTIVE surface=comgrow
 {% else %} 
 SET_SURFACE_ACTIVE surface=comgrow
 {% endif %}

[gcode_macro GLASS]    
gcode:
 {% if printer.toolhead.homed_axes != "xyz" %}
 UNHOME_RAISE_Z
 SET_SURFACE_ACTIVE surface=glass
 {% else %} 
 SET_SURFACE_ACTIVE surface=glass
 {% endif %}

[gcode_macro CLEAN_NOZZLE]
gcode:
 LAZY_HOME

[gcode_macro CLEAN_NOZZLE_OFF]
variable_wipe_qty: 3 ;how many times will it wipe
variable_wipe_spd: 50 ;wipe speed
gcode:
 {% set TURNOFF_AFTER = params.TURNOFF_AFTER|default(1)|float %}
 {% set surfaces = printer.save_variables.variables.bed_surfaces %}
 {% set CLEAN_TEMP = params.CLEAN_TEMP|default(printer.extruder.temperature)|float %} 
 {% if CLEAN_TEMP >= 200 %}
 M109 S{CLEAN_TEMP}
 {% else %}
 {% set CLEAN_TEMP = 200 %}
 M104 S{CLEAN_TEMP}
 {% endif %}
 RESPOND TYPE=echo_no_space msg="CLEANING AT {CLEAN_TEMP} ON {surfaces.active}"
 LAZY_HOME
 TEMPERATURE_WAIT SENSOR=extruder MINIMUM=200
 {% if surfaces.active != "glass" %}
 G90
 G0 X236 Y30 F6000
 G0 Z4 F1500
 {% else %}
 G90
 G0 X236 Y30 F6000
 G0 Z0.5 F1500
 {% endif %}
  
  
 {% for wipes in range(1, (wipe_qty + 1)) %}
 G1 X240 Y30 F{wipe_spd * 30}
 G1 X236 Y22.5 F{wipe_spd * 30}
 G1 X240 Y15 F{wipe_spd * 30}
 G1 X236 Y7.5 F{wipe_spd * 30}
 G1 X240 Y0 F{wipe_spd * 30}
 G1 X236 Y0 F{wipe_spd * 30}
 G1 X240 Y7.5 F{wipe_spd * 30}
 G1 X236 Y15 F{wipe_spd * 30}
 G1 X240 Y22.5 F{wipe_spd * 30}
 G1 X236 Y30 F{wipe_spd * 30}
 {% endfor %}
 G1 X240 Y30 F{wipe_spd * 30}
 G1 X240 Y0 F{wipe_spd * 30}
 G1 X240 Y30 F{wipe_spd * 30}
 G1 X240 Y0 F{wipe_spd * 30}
 G1 X225 Y0 F{wipe_spd * 30}
 G1 X117.5 Y0 F{wipe_spd * 30}
 G1 Z10 ;raise the z axis
 LAZY_HOME
 {% if TURNOFF_AFTER != 1 %}
 RESPOND TYPE=echo_no_space msg="CLEANING COMPLETE"
 {% else %}
 M109 S0
 RESPOND TYPE=echo_no_space msg="CLEANING COMPLETE"
 {% endif %}

#[gcode_macro BDS_CAL]
#gcode:
# M102 S-6

#[gcode_macro BDS_READ]
#gcode:
# M102 S-5

#[gcode_macro BDS_DISTANCE]
#gcode:
# M102 S-2

#[gcode_macro Z_TILT_ADJUST]
#rename_existing: _Z_TILT_ADJUST
#description:
#gcode:
 #run z tilt with z move up and down at first
 #BDSENSOR_SET QGL_TILT_PROBE=1 #set this 1 to enable z axis up and down
 #BDSENSOR_SET COLLISION_HOMING=0
 #_Z_TILT_ADJUST horizontal_move_z=5 retry_tolerance=1
 #G28.6245197 Z0
 #run z tilt with no z move up and down
 #BDSENSOR_SET QGL_TILT_PROBE=0 #set this 0 to disable z axis up and down while probe
 #_Z_TILT_ADJUST horizontal_move_z=1 retry_tolerance=0.04
 #BDSENSOR_SET COLLISION_HOMING=1 #optional
 #G28.6245197 Z0

[gcode_macro EXTRUSION_FACTOR_old]
gcode:
 {% set svv = printer.save_variables.variables %}
 {% set EF_PERC = params.EF_PERC|default(0)|float %}
 {% set FILAMENT = params.FILAMENT|default("LIST")|string|upper %}
 {% if FILAMENT == "LIST" %}
 RESPOND TYPE=echo_no_space msg="VALID TYPES ARE PLA AND PETG"
 RESPOND TYPE=echo_no_space msg="PLA: {svv.ef_pla}"
 RESPOND TYPE=echo_no_space msg="PETG: {svv.ef_petg}"
 {% else %}
 {% if FILAMENT == "PLA" %}
 {% if EF_PERC == 0 %}
 M221 S{svv.ef_pla}
 {% else %}
 SAVE_VARIABLE VARIABLE=ef_pla VALUE={EF_PERC}
 M221 S{EF_PERC}
 {% endif %}
 {% else %}
 {% if FILAMENT == "PETG" %}
 {% if EF_PERC == 0 %}
 M221 S{svv.ef_petg}
 {% else %}
 SAVE_VARIABLE VARIABLE=ef_petg VALUE={EF_PERC}
 M221 S{EF_PERC}
 {% endif %}
 {% endif %}
 {% endif %}
 {% endif %}

[gcode_macro EXTRUSION_FACTOR]
gcode:
 {% set svv = printer.save_variables.variables %}
 {% set EF_PERC = params.EF_PERC|default(0)|float %}
 {% set STATUS = params.STATUS|default("LIST")|string|upper %}
 {% if STATUS == "LIST" %}
 RESPOND TYPE=echo_no_space msg="CURRENT EXTRUSION FACTOR = %{svv.ef}"
 {% else %}
   {% if EF_PERC == 0 %}
   M221 S{svv.ef}
   {% else %}
   SAVE_VARIABLE VARIABLE=ef VALUE={EF_PERC}
   M221 S{EF_PERC}
   {% endif %}
 {% endif %}
 
 
;[gcode_macro EXTRUSION_FACTOR]
;gcode:
; {% set svv = printer.save_variables.variables %}
; {% set EF_PERC = params.EF_PERC|default(0)|float %}
; {% set PROFILE = params.PROFILE|default("LIST")|lower|string %}
; {% if PROFILE == "list" %}
;  SEARCH_VARS S=ef_
;  RESPOND TYPE=echo_no_space msg="PROFILES AVAILABLE:"
; {% else %}
;  {% if EF_PERC == 0 %}
;    { action_respond_info("%s%s" % (printer.save.variables.variables.ef_, PROFILE)) }
;    M221 S{("%s%s" % (printer.save.variables.variables.ef_, PROFILE))}
;    SEARCH_VARS S={PROFILE}
;  {% else %}
;    SAVE_VARIABLE VARIABLE=ef_{PROFILE} VALUE={EF_PERC}
;    SEARCH_VARS S={PROFILE}
;    M221 S{EF_PERC}
;  {% endif %}
; {% endif %}
   
   

[gcode_macro SEARCH_VARS]
#
# SEARCH_VARS
#
# Dump the printer object so you can find variables of interest
# Credit to https://gist.github.com/mpalpha/ for the original
#
description: Dump the printer object to the console
gcode:
    {% set search = params.S|default("ef_")|lower|string %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
           #{ action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                   #{% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                       { action_respond_info("%s : %s" % (ns.path|join, child)) }
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}



 